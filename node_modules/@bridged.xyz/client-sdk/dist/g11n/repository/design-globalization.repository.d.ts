import { RawAsset } from "../../assets";
import { IGlobalizedKey, LayerTranslation } from "..";
import { GlobalizedTextKeyRegisterRequest, TextTranslationPutRequest } from "../api";
export declare class DesignGlobalizationRepositoriesStore {
    static readonly repositories: Array<DesignGlobalizationRepository>;
    static make(projectId: string, sceneId: string): DesignGlobalizationRepository;
    static find(sceneId: string): DesignGlobalizationRepository;
}
export declare class DesignGlobalizationRepository {
    readonly projectId: string;
    readonly sceneId: string;
    readonly locales: string[];
    readonly chache: Map<string, RawAsset>;
    private readonly textTranslationRepository;
    private readonly layerKeyMapRepository;
    constructor(projectId: string, sceneId: string);
    registerTextKey(layerId: string, request: GlobalizedTextKeyRegisterRequest): Promise<import("../api/responses").GlobalizedKeyRegisterResponse>;
    putTextTranslation(layerId: string, request: TextTranslationPutRequest): Promise<any>;
    fetchTranslation(layerId: string, options?: {
        cached?: boolean;
    }): Promise<IGlobalizedKey | undefined>;
    fetchLocaleTranslation(layerId: string, locale: string): Promise<string | undefined>;
    fetchKeys(): Promise<ReadonlyArray<string>>;
    fetchTranslations(): Promise<ReadonlyArray<LayerTranslation>>;
}
