"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DesignGlobalizationRepository = exports.DesignGlobalizationRepositoriesStore = void 0;
const layer_key_map_repository_1 = require("./layer-key-map.repository");
const text_translation_repository_1 = require("./text-translation.repository");
class DesignGlobalizationRepositoriesStore {
    static make(projectId, sceneId) {
        const repo = new DesignGlobalizationRepository(projectId, sceneId);
        this.repositories.push(repo);
        console.log('created DesignGlobalizationRepository', repo);
        return repo;
    }
    static find(sceneId) {
        return this.repositories.find(r => r.sceneId == sceneId);
    }
}
exports.DesignGlobalizationRepositoriesStore = DesignGlobalizationRepositoriesStore;
DesignGlobalizationRepositoriesStore.repositories = [];
class DesignGlobalizationRepository {
    constructor(projectId, sceneId) {
        this.projectId = projectId;
        this.sceneId = sceneId;
        this.locales = ['en', 'ja', 'ko'];
        this.chache = new Map();
        this.textTranslationRepository = new text_translation_repository_1.TextTranslationRepository(projectId);
        this.layerKeyMapRepository = new layer_key_map_repository_1.LayerKeyMapRepository(projectId, sceneId);
    }
    async registerTextKey(layerId, request) {
        const key = await this.textTranslationRepository.registerKey(request);
        this.layerKeyMapRepository.putMap(layerId, key.id);
        return key;
    }
    async putTextTranslation(layerId, request) {
        const key = await this.textTranslationRepository.putTranslation(request);
        return key;
    }
    async fetchTranslation(layerId, options) {
        const lt = await this.layerKeyMapRepository.fetchLayerTranslation(layerId);
        if (lt) {
            const translation = lt.translation;
            console.log(`fetched translation for layer ${layerId}`, translation);
            return translation;
        }
        return undefined;
    }
    async fetchLocaleTranslation(layerId, locale) {
        var _a;
        const translation = await this.fetchTranslation(layerId);
        const translations = translation === null || translation === void 0 ? void 0 : translation.translations;
        if (translations) {
            return (_a = translations[locale]) === null || _a === void 0 ? void 0 : _a.value;
        }
    }
    async fetchKeys() {
        return (await this.layerKeyMapRepository.fetchTranslations()).map((e) => e.keyId);
    }
    async fetchTranslations() {
        return await this.layerKeyMapRepository.fetchTranslations();
    }
}
exports.DesignGlobalizationRepository = DesignGlobalizationRepository;
//# sourceMappingURL=design-globalization.repository.js.map