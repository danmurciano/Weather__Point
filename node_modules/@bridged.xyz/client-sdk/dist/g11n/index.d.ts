import { RawAsset } from "../assets";
export * from "./validators";
export * from "./placeholder";
export interface ILocale {
    languageCode: string;
    countryCode?: string;
}
export declare class Locale implements ILocale {
    languageCode: string;
    countryCode?: string;
    constructor(props: ILocale);
    toString(): string;
}
export declare type Translations = Map<string, RawAsset>;
export interface IGlobalizedText {
    id: string;
    path: string;
    name: string;
    key: IGlobalizedKey;
}
export interface IGlobalizedCreateInput {
}
export interface IGlobalizedKey {
    id: string;
    key: string;
    translations: Translations;
}
export declare class GlobalizedKey implements IGlobalizedKey {
    id: string;
    key: string;
    translations: Translations;
    constructor(props: IGlobalizedKey);
    updateValueFor(locale: string, newValue: string): void;
}
export interface IGlobalizedVariable {
    id: string;
    namespace: string;
    name: string;
    translations: Array<Translations>;
}
export declare class GlobalizedVariable implements IGlobalizedVariable {
    id: string;
    name: string;
    namespace: string;
    translations: Translations[];
    constructor(props: IGlobalizedVariable);
}
export interface LayerTranslation {
    sceneId: string;
    layerId: string;
    keyId: string;
    projectId: string;
    translation: IGlobalizedKey;
}
