"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchTextTranslationsFromScene = exports.fetchTextTranslationFromLayer = exports.putLayerKeyMap = exports.fetchTextTranslation = exports.putTextTranslation = exports.updateKeyName = exports.registerTranslationKey = exports.G11nService = void 0;
const axios_1 = __importDefault(require("axios"));
const hosts_1 = require("../../constants/hosts");
const axios = axios_1.default.create({
    baseURL: hosts_1.G11N_SERVICE_HOST
});
class G11nService {
    constructor(projecId) {
        this.projecId = projecId;
    }
    async registerKey(request) {
        return await registerTranslationKey(this.projecId, request);
    }
    async updateKeyName(id, newKeyName) {
        updateKeyName(id, {
            keyName: newKeyName
        });
    }
    async putTextTranslation(request) {
        return await putTextTranslation(this.projecId, request);
    }
    async fetchTranslation(id) {
        return await fetchTextTranslation(id);
    }
}
exports.G11nService = G11nService;
async function registerTranslationKey(projectId, request) {
    const resp = await axios.post(`keys/`, request);
    return resp.data;
}
exports.registerTranslationKey = registerTranslationKey;
async function updateKeyName(id, request) {
    const resp = await axios.patch(`/keys/${id}/name`, request);
    return resp.data;
}
exports.updateKeyName = updateKeyName;
async function putTextTranslation(projectId, request) {
    const resp = await axios.put(`translations/${request.keyId}/locales/${request.locale}`, {
        value: request.value
    });
    return resp.data;
}
exports.putTextTranslation = putTextTranslation;
async function fetchTextTranslation(id) {
    const resp = await axios.get(`translations/${id}`);
    return resp.data;
}
exports.fetchTextTranslation = fetchTextTranslation;
async function putLayerKeyMap(projectId, request) {
    const resp = await axios.put(`scenes/${request.sceneId}/layers/${request.layerId}`, {
        keyId: request.keyId
    });
    return resp.data;
}
exports.putLayerKeyMap = putLayerKeyMap;
async function fetchTextTranslationFromLayer(projectId, request) {
    try {
        const resp = await axios.get(`scenes/${request.sceneId}/layers/${request.layerId}`);
        return resp.data;
    }
    catch (_) {
        if (_.response.status == 404) {
            return undefined;
        }
        throw _;
    }
}
exports.fetchTextTranslationFromLayer = fetchTextTranslationFromLayer;
async function fetchTextTranslationsFromScene(projectId, request) {
    const resp = await axios.get(`scenes/${request.sceneId}`);
    return resp.data;
}
exports.fetchTextTranslationsFromScene = fetchTextTranslationsFromScene;
//# sourceMappingURL=service.js.map