{"ast":null,"code":"import _regeneratorRuntime from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/regenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _asyncToGenerator from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/Components/SearchBar3.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport Table from 'react-bootstrap/Table';\nimport { cityList } from \"../public/city-list\";\nvar cities = cityList;\n\nfunction SearchBar3() {\n  _s();\n\n  var _this = this;\n\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      search = _React$useState2[0],\n      setSearch = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      suggestions = _React$useState4[0],\n      setSuggestions = _React$useState4[1];\n\n  function getSuggestions(value) {\n    console.log(value); // const inputValue = value.trim().toLowerCase();\n    // const inputLength = inputValue.length;\n\n    return inputLength < 3 ? [] : cities.filter(function (city) {\n      return city.city.toLowerCase().slice(0, inputLength) === inputValue;\n    });\n  }\n\n  ;\n\n  function onSuggestionsFetchRequested(search) {\n    setSuggestions(getSuggestions(search));\n  } // const onSuggestionsFetchRequested = ({ search }) => {\n  //   this.setState({\n  //     suggestions: getSuggestions(search)\n  //   });\n  // };\n\n\n  function handleChange(event) {\n    setSearch(event.target.value);\n  }\n\n  function handleClearSearch(event) {\n    setSearch(\"\");\n    setSuggestions([]);\n  }\n\n  function handleSubmit(_x) {\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  function _handleSubmit() {\n    _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (search.length > 1) {\n                router.push(\"/location?search=\".concat(search)); // setSearch(\"\");\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  var getSuggestionValue = function getSuggestionValue(suggestion) {\n    return suggestion.city + \", \" + suggestion.country;\n  };\n\n  var renderSuggestion = function renderSuggestion(suggestion) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      \"class\": \"search-table\",\n      children: [\" \", suggestion.city, \", \", suggestion.country, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, _this);\n  };\n\n  var inputProps = {\n    placeholder: 'Search City or Zip Code',\n    search: search,\n    onChange: function onChange() {\n      return handleChange(event);\n    },\n    onSubmit: function onSubmit() {\n      return handleSubmit(event);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n    onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n    onSuggestionHighlighted: this.onSuggestionHighlighted,\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    inputProps: inputProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SearchBar3, \"kzdjuak2oUXS5zilR8Nnf83rn9s=\");\n\n_c = SearchBar3;\nexport default SearchBar3;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar3\");","map":{"version":3,"sources":["/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/Components/SearchBar3.js"],"names":["React","Autosuggest","Table","cityList","cities","SearchBar3","useState","search","setSearch","suggestions","setSuggestions","getSuggestions","value","console","log","inputLength","filter","city","toLowerCase","slice","inputValue","onSuggestionsFetchRequested","handleChange","event","target","handleClearSearch","handleSubmit","length","router","push","getSuggestionValue","suggestion","country","renderSuggestion","inputProps","placeholder","onChange","onSubmit","onSuggestionsClearRequested","onSuggestionHighlighted"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport Table from 'react-bootstrap/Table';\nimport { cityList } from \"../public/city-list\";\n\n\nconst cities = cityList;\n\n\nfunction SearchBar3() {\n  const [search, setSearch] = React.useState(\"\");\n  const [suggestions, setSuggestions] = React.useState([]);\n\n\n\n  function getSuggestions(value) {\n    console.log(value);\n    // const inputValue = value.trim().toLowerCase();\n    // const inputLength = inputValue.length;\n\n    return inputLength < 3 ? [] : cities.filter(city =>\n      city.city.toLowerCase().slice(0, inputLength) === inputValue\n    );\n  };\n\n\n  function onSuggestionsFetchRequested(search) {\n    setSuggestions(getSuggestions(search))\n  }\n\n  // const onSuggestionsFetchRequested = ({ search }) => {\n  //   this.setState({\n  //     suggestions: getSuggestions(search)\n  //   });\n  // };\n\n\n\n\n  function handleChange(event) {\n    setSearch(event.target.value);\n  }\n\n  function handleClearSearch(event) {\n    setSearch(\"\");\n    setSuggestions([])\n  }\n\n  async function handleSubmit(event) {\n    if (search.length > 1) {\n      router.push(`/location?search=${search}`);\n      // setSearch(\"\");\n    }\n  }\n\n\n\n  const getSuggestionValue = suggestion => suggestion.city + \", \" + suggestion.country;\n\n\n  const renderSuggestion = suggestion => (\n    <div class=\"search-table\"> {suggestion.city}, {suggestion.country} </div>\n  );\n\n  const inputProps = {\n    placeholder: 'Search City or Zip Code',\n    search,\n    onChange: () => handleChange(event),\n    onSubmit: () => handleSubmit(event)\n  };\n\n  return (\n    <Autosuggest\n    suggestions={suggestions}\n    onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n    onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n    onSuggestionHighlighted={this.onSuggestionHighlighted}\n    getSuggestionValue={getSuggestionValue}\n    renderSuggestion={renderSuggestion}\n    inputProps={inputProps}\n    />\n  );\n\n}\n\n\n\n\nexport default SearchBar3;\n"]},"metadata":{},"sourceType":"module"}