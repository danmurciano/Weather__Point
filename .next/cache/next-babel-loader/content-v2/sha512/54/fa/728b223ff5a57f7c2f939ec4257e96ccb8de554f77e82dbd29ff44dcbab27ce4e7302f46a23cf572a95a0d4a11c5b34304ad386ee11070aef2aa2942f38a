{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/Components/LocationResults.jsx\";\nimport React from 'react';\nimport Table from \"./Table\";\nimport Table2 from \"./Table2\";\nimport Chart from \"./Chart\";\nimport { mean } from 'mathjs';\nimport _ from \"lodash\";\nimport locations from \"locations\";\nexport default function LocationResults(props) {\n  const location = props.location;\n  const months = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n  const city = location;\n  var i;\n  var maxTemprature = city.maxTemprature;\n  maxTemprature.push(mean(maxTemprature));\n  const avgDayTemprature = avgDayTempratureCalc(city.maxTemprature, city.minTemprature);\n  const nonPeakAdjustment = nonPeakCalc(city.maxTemprature, city.minTemprature);\n  const windEffect = windEffectCalc(avgDayTemprature, city.avgWind);\n  const humidity = humidityCalc(city.dewPoint); // const sunHeat = sunHeatCalc(avgDayTemprature, city.latitude, city.skyClearness);\n\n  const sunHeat = sunHeatCalc(avgDayTemprature, city.solarEnergy);\n  const perceivedTemprature = perceivedTempratureCalc(avgDayTemprature, windEffect, humidity, sunHeat);\n\n  function avgDayTempratureCalc(max, min) {\n    var avgDayTemprature = [];\n\n    for (i = 0; i < 12; i++) {\n      avgDayTemprature.push(0.75 * max[i] + 0.25 * min[i]);\n    }\n\n    avgDayTemprature.push(mean(avgDayTemprature));\n    return avgDayTemprature;\n  }\n\n  function nonPeakCalc(max, min) {\n    var nonPeakAdjustment = [];\n\n    for (i = 0; i < 12; i++) {\n      nonPeakAdjustment.push(0.25 * (15 - (max[i] - min[i])));\n    }\n\n    nonPeakAdjustment.push(mean(nonPeakAdjustment));\n    return nonPeakAdjustment;\n  }\n\n  function windEffectCalc(temp, velocity) {\n    var windEffect = [];\n    const windCoefficient = velocity.map(month => Math.pow(month, 0.25) / 2.37 + 0.2904 - 1);\n    const windTemprature = [];\n\n    for (i = 0; i < 12; i++) {\n      windEffect.push((temp[i] - 96.8) * windCoefficient[i]);\n    }\n\n    windEffect.push(mean(windEffect));\n    return windEffect;\n  }\n\n  function humidityCalc(dewPoint) {\n    const humidity = [];\n\n    for (i = 0; i < 12; i++) {\n      humidity.push(Math.pow(Math.max(dewPoint[i] - 56, 0), 2.25) / 60);\n    }\n\n    humidity.push(mean(humidity));\n    return humidity;\n  } // function sunHeatCalc(temp, latitude, clearness) {\n  //   const sunHeat = [];\n  //   const sunPosition = [-21.0, -12.7, -1.4, 10.3, 19.3, 23.3, 21.2, 13.4, 2.5, -9.2, -18.4, -23.3];\n  //   const sunAngle = sunPosition.map(month => Math.max(90 - Math.abs(latitude - month), 0) / 90);\n  //   const potentialSunHeat = sunAngle.map(month => 1 - Math.pow(1 - month, 2.5));\n  //   const maxSunHeat = temp.map(month => 15 - temp[i] * 0.06);\n  //   const avgSunHeat = temp.map(month => (temp[i] + 17.5) / 150);\n  //   for (i = 0; i < 12; i++) {\n  //     sunHeat.push((maxSunHeat[i] * potentialSunHeat[i] * (0.2 + clearness[i] * 0.008)) - maxSunHeat[i] * avgSunHeat[i]);\n  //   }\n  //   sunHeat.push(mean(sunHeat));\n  //   return sunHeat;\n  // }\n\n\n  function sunHeatCalc(temp, solarEnergy) {\n    const sunHeat = [];\n    const avgSunHeat = temp.map(month => 0.088 * month);\n\n    for (i = 0; i < 12; i++) {\n      sunHeat.push(1.25 * solarEnergy[i] - avgSunHeat[i]);\n    }\n\n    sunHeat.push(mean(sunHeat));\n    return sunHeat;\n  }\n\n  function perceivedTempratureCalc(avgDayTemprature, windEffect, humidity, sunHeat) {\n    const perceivedTemprature = [];\n\n    for (i = 0; i < 12; i++) {\n      perceivedTemprature.push(avgDayTemprature[i] + windEffect[i] + humidity[i] + sunHeat[i] + 3.75);\n    }\n\n    perceivedTemprature.push(mean(perceivedTemprature));\n    return perceivedTemprature;\n  }\n\n  function score() {\n    const averages = perceivedTemprature;\n    const desiredTemprature = props.desiredTemprature;\n    const monthlyScore = [];\n    var i;\n\n    for (i = 0; i < 12; i++) {\n      monthlyScore.push((10 - Math.abs(desiredTemprature - averages[i]) / 4).toFixed(1));\n    }\n\n    const yearlyScore = 0.67 * mean(monthlyScore) + 0.33 * (10 - Math.abs(desiredTemprature - perceivedTemprature[12]) / 2.5);\n    monthlyScore.push(yearlyScore.toFixed(1));\n    return monthlyScore;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"results-bar\",\n    children: [/*#__PURE__*/_jsxDEV(Table2, {\n      locationName: location.name,\n      latitude: location.latitude.toFixed(1),\n      maxTemprature: maxTemprature,\n      perceivedTemprature: perceivedTemprature,\n      avgDayTemprature: avgDayTemprature,\n      nonPeakAdjustment: nonPeakAdjustment,\n      windEffect: windEffect,\n      humidity: humidity,\n      sunHeat: sunHeat,\n      score: score()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      scores: score()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/Components/LocationResults.jsx"],"names":["React","Table","Table2","Chart","mean","_","locations","LocationResults","props","location","months","city","i","maxTemprature","push","avgDayTemprature","avgDayTempratureCalc","minTemprature","nonPeakAdjustment","nonPeakCalc","windEffect","windEffectCalc","avgWind","humidity","humidityCalc","dewPoint","sunHeat","sunHeatCalc","solarEnergy","perceivedTemprature","perceivedTempratureCalc","max","min","temp","velocity","windCoefficient","map","month","Math","pow","windTemprature","avgSunHeat","score","averages","desiredTemprature","monthlyScore","abs","toFixed","yearlyScore","name","latitude"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Table from \"./Table\"\nimport Table2 from \"./Table2\"\nimport Chart from \"./Chart\"\nimport {mean} from 'mathjs'\nimport _ from \"lodash\";\nimport locations from \"locations\";\n\n\nexport default function LocationResults(props) {\n  const location = props.location;\n\n  const months = [0,1,2,3,4,5,6,7,8,9,10,11,12];\n\n  const city = location;\n  var i;\n\n  var maxTemprature = city.maxTemprature;\n  maxTemprature.push(mean(maxTemprature))\n\n  const avgDayTemprature = avgDayTempratureCalc(city.maxTemprature, city.minTemprature);\n  const nonPeakAdjustment = nonPeakCalc(city.maxTemprature, city.minTemprature);\n  const windEffect = windEffectCalc(avgDayTemprature, city.avgWind);\n  const humidity = humidityCalc(city.dewPoint);\n  // const sunHeat = sunHeatCalc(avgDayTemprature, city.latitude, city.skyClearness);\n  const sunHeat = sunHeatCalc(avgDayTemprature, city.solarEnergy);\n  const perceivedTemprature = perceivedTempratureCalc(avgDayTemprature, windEffect, humidity, sunHeat);\n\n\n  function avgDayTempratureCalc(max, min) {\n    var avgDayTemprature = [];\n    for (i = 0; i < 12; i++) {\n      avgDayTemprature.push(0.75 * max[i] + 0.25 * min[i]);\n    }\n    avgDayTemprature.push(mean(avgDayTemprature));\n    return avgDayTemprature;\n  }\n\n  function nonPeakCalc(max, min) {\n    var nonPeakAdjustment = [];\n    for (i = 0; i < 12; i++) {\n      nonPeakAdjustment.push(0.25 * (15 - (max[i] - min[i])));\n    }\n    nonPeakAdjustment.push(mean(nonPeakAdjustment))\n    return nonPeakAdjustment\n  }\n\n\n  function windEffectCalc(temp, velocity) {\n    var windEffect = [];\n    const windCoefficient = velocity.map(month => (Math.pow(month, 0.25) / 2.37 + 0.2904) - 1);\n    const windTemprature = [];\n    for (i = 0; i < 12; i++) {\n      windEffect.push((temp[i] - 96.8) * windCoefficient[i]);\n    }\n    windEffect.push(mean(windEffect));\n    return windEffect;\n  }\n\n\n  function humidityCalc(dewPoint) {\n    const humidity = []\n    for (i = 0; i < 12; i++) {\n      humidity.push(Math.pow((Math.max(dewPoint[i] - 56, 0)), 2.25) / 60);\n    }\n    humidity.push(mean(humidity));\n    return humidity;\n  }\n\n\n  // function sunHeatCalc(temp, latitude, clearness) {\n  //   const sunHeat = [];\n  //   const sunPosition = [-21.0, -12.7, -1.4, 10.3, 19.3, 23.3, 21.2, 13.4, 2.5, -9.2, -18.4, -23.3];\n  //   const sunAngle = sunPosition.map(month => Math.max(90 - Math.abs(latitude - month), 0) / 90);\n  //   const potentialSunHeat = sunAngle.map(month => 1 - Math.pow(1 - month, 2.5));\n  //   const maxSunHeat = temp.map(month => 15 - temp[i] * 0.06);\n  //   const avgSunHeat = temp.map(month => (temp[i] + 17.5) / 150);\n  //   for (i = 0; i < 12; i++) {\n  //     sunHeat.push((maxSunHeat[i] * potentialSunHeat[i] * (0.2 + clearness[i] * 0.008)) - maxSunHeat[i] * avgSunHeat[i]);\n  //   }\n  //   sunHeat.push(mean(sunHeat));\n  //   return sunHeat;\n  // }\n\n  function sunHeatCalc(temp, solarEnergy) {\n    const sunHeat = [];\n    const avgSunHeat = temp.map(month => 0.088 * month);\n    for (i = 0; i < 12; i++) {\n      sunHeat.push(1.25 * solarEnergy[i] - avgSunHeat[i]);\n    }\n    sunHeat.push(mean(sunHeat));\n    return sunHeat;\n  }\n\n\n  function perceivedTempratureCalc(avgDayTemprature, windEffect, humidity, sunHeat) {\n    const perceivedTemprature = [];\n    for (i = 0; i < 12; i++) {\n      perceivedTemprature.push((avgDayTemprature[i] + windEffect[i] + humidity[i] + sunHeat[i] + 3.75));\n    }\n    perceivedTemprature.push(mean(perceivedTemprature));\n    return perceivedTemprature;\n  }\n\n\n\n  function score() {\n    const averages = perceivedTemprature;\n    const desiredTemprature = props.desiredTemprature;\n    const monthlyScore = [];\n    var i;\n    for (i = 0; i < 12; i++) {\n      monthlyScore.push((10 - Math.abs(desiredTemprature - averages[i]) / 4).toFixed(1))\n    }\n      const yearlyScore = 0.67 * mean(monthlyScore) + 0.33 * (10 - Math.abs(desiredTemprature - perceivedTemprature[12]) / 2.5);\n      monthlyScore.push(yearlyScore.toFixed(1));\n\n    return monthlyScore;\n  }\n\n\n  return (\n    <div class=\"results-bar\">\n      <Table2\n        locationName={location.name}\n        latitude={location.latitude.toFixed(1)}\n        maxTemprature={maxTemprature}\n        perceivedTemprature={perceivedTemprature}\n        avgDayTemprature={avgDayTemprature}\n        nonPeakAdjustment={nonPeakAdjustment}\n        windEffect={windEffect}\n        humidity={humidity}\n        sunHeat={sunHeat}\n        score={score()}\n      />\n      <Chart scores={score()}/>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}