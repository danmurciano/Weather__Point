{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/Components/SearchBar3.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport Table from 'react-bootstrap/Table';\nimport { cityList } from \"../public/city-list\";\nconst cities = cityList; // Teach Autosuggest how to calculate suggestions for any given input value.\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  return inputLength < 3 ? [] : cities.filter(city => city.city.toLowerCase().slice(0, inputLength) === inputValue);\n};\n\nfunction getSuggestionValue(suggestion) {\n  return `${suggestion.city}, ${suggestion.country}`;\n}\n\nfunction renderSuggestion(suggestion, {\n  query\n}) {\n  const suggestionText = `${suggestion.city}, ${suggestion.country}`; // const matches = AutosuggestHighlightMatch(suggestionText, query);\n  // const parts = AutosuggestHighlightParse(suggestionText, matches);\n}\n\nclass SearchBar3 extends React.Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"onChange\", (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    });\n\n    _defineProperty(this, \"onSuggestionsFetchRequested\", ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    });\n\n    _defineProperty(this, \"onSuggestionsClearRequested\", () => {\n      this.setState({\n        suggestions: []\n      });\n    });\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: 'Search City or Zip Code',\n      value,\n      onChange: this.onChange\n    }; // Finally, render it!\n\n    return /*#__PURE__*/_jsxDEV(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default SearchBar3;","map":{"version":3,"sources":["/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/Components/SearchBar3.js"],"names":["React","Autosuggest","Table","cityList","cities","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","city","slice","getSuggestionValue","suggestion","country","renderSuggestion","query","suggestionText","SearchBar3","Component","constructor","event","newValue","setState","suggestions","state","render","inputProps","placeholder","onChange","onSuggestionsFetchRequested","onSuggestionsClearRequested"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAGA,MAAMC,MAAM,GAAGD,QAAf,C,CAGA;;AACA,MAAME,cAAc,GAAGC,KAAK,IAAI;AAC9B,QAAMC,UAAU,GAAGD,KAAK,CAACE,IAAN,GAAaC,WAAb,EAAnB;AACA,QAAMC,WAAW,GAAGH,UAAU,CAACI,MAA/B;AAEA,SAAOD,WAAW,GAAG,CAAd,GAAkB,EAAlB,GAAuBN,MAAM,CAACQ,MAAP,CAAcC,IAAI,IAC9CA,IAAI,CAACA,IAAL,CAAUJ,WAAV,GAAwBK,KAAxB,CAA8B,CAA9B,EAAiCJ,WAAjC,MAAkDH,UADtB,CAA9B;AAGD,CAPD;;AASA,SAASQ,kBAAT,CAA4BC,UAA5B,EAAwC;AACtC,SAAQ,GAAEA,UAAU,CAACH,IAAK,KAAIG,UAAU,CAACC,OAAQ,EAAjD;AACD;;AAGD,SAASC,gBAAT,CAA0BF,UAA1B,EAAsC;AAAEG,EAAAA;AAAF,CAAtC,EAAiD;AAC/C,QAAMC,cAAc,GAAI,GAAEJ,UAAU,CAACH,IAAK,KAAIG,UAAU,CAACC,OAAQ,EAAjE,CAD+C,CAE/C;AACA;AACD;;AAID,MAAMI,UAAN,SAAyBrB,KAAK,CAACsB,SAA/B,CAAyC;AACvCC,EAAAA,WAAW,GAAG;AACZ;;AADY,sCASH,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAyB;AAClC,WAAKC,QAAL,CAAc;AACZpB,QAAAA,KAAK,EAAEmB;AADK,OAAd;AAGD,KAba;;AAAA,yDAiBgB,CAAC;AAAEnB,MAAAA;AAAF,KAAD,KAAe;AAC3C,WAAKoB,QAAL,CAAc;AACZC,QAAAA,WAAW,EAAEtB,cAAc,CAACC,KAAD;AADf,OAAd;AAGD,KArBa;;AAAA,yDAwBgB,MAAM;AAClC,WAAKoB,QAAL,CAAc;AACZC,QAAAA,WAAW,EAAE;AADD,OAAd;AAGD,KA5Ba;;AAGZ,SAAKC,KAAL,GAAa;AACXtB,MAAAA,KAAK,EAAE,EADI;AAEXqB,MAAAA,WAAW,EAAE;AAFF,KAAb;AAID;;AAuBDE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEvB,MAAAA,KAAF;AAASqB,MAAAA;AAAT,QAAyB,KAAKC,KAApC,CADO,CAGP;;AACA,UAAME,UAAU,GAAG;AACjBC,MAAAA,WAAW,EAAE,yBADI;AAEjBzB,MAAAA,KAFiB;AAGjB0B,MAAAA,QAAQ,EAAE,KAAKA;AAHE,KAAnB,CAJO,CAWP;;AACA,wBACE,QAAC,WAAD;AACE,MAAA,WAAW,EAAEL,WADf;AAEE,MAAA,2BAA2B,EAAE,KAAKM,2BAFpC;AAGE,MAAA,2BAA2B,EAAE,KAAKC,2BAHpC;AAIE,MAAA,kBAAkB,EAAEnB,kBAJtB;AAKE,MAAA,gBAAgB,EAAEG,gBALpB;AAME,MAAA,UAAU,EAAEY;AANd;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AArDsC;;AAwDzC,eAAeT,UAAf","sourcesContent":["import React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport Table from 'react-bootstrap/Table';\nimport { cityList } from \"../public/city-list\";\n\n\nconst cities = cityList;\n\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  return inputLength < 3 ? [] : cities.filter(city =>\n    city.city.toLowerCase().slice(0, inputLength) === inputValue\n  );\n};\n\nfunction getSuggestionValue(suggestion) {\n  return `${suggestion.city}, ${suggestion.country}`;\n}\n\n\nfunction renderSuggestion(suggestion, { query }) {\n  const suggestionText = `${suggestion.city}, ${suggestion.country}`;\n  // const matches = AutosuggestHighlightMatch(suggestionText, query);\n  // const parts = AutosuggestHighlightParse(suggestionText, matches);\n}\n\n\n\nclass SearchBar3 extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: 'Search City or Zip Code',\n      value,\n      onChange: this.onChange\n    };\n\n\n    // Finally, render it!\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n      />\n    );\n  }\n}\n\nexport default SearchBar3;\n"]},"metadata":{},"sourceType":"module"}