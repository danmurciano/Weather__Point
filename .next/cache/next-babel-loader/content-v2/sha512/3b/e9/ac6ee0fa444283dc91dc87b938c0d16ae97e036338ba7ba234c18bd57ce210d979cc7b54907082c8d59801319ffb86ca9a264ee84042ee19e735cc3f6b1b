{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/Components/SearchBar3.js\";\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport Table from 'react-bootstrap/Table';\nimport { cityList } from \"../public/city-list\";\nconst cities = cityList;\n\nfunction SearchBar3() {\n  const [search, setSearch] = React.useState(\"\");\n  const [suggestions, setSuggestions] = React.useState([]);\n\n  const getSuggestions = search => {\n    const inputValue = search.trim().toLowerCase();\n    const inputLength = inputValue.length;\n    return inputLength < 3 ? [] : cities.filter(city => city.city.toLowerCase().slice(0, inputLength) === inputValue);\n  };\n\n  function handleChange(event) {\n    setSearch(event.target.value);\n  }\n\n  function handleClearSearch(event) {\n    setSearch(\"\");\n    setSuggestions([]);\n  }\n\n  async function handleSubmit(event) {\n    if (search.length > 1) {\n      router.push(`/location?search=${search}`); // setSearch(\"\");\n    }\n  }\n\n  const onSuggestionsFetchRequested = ({\n    search\n  }) => {\n    this.setState({\n      suggestions: getSuggestions(search)\n    });\n  };\n\n  const getSuggestionValue = suggestion => suggestion.city + \", \" + suggestion.country;\n\n  const renderSuggestion = suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"search-table\",\n    children: [\" \", suggestion.city, \", \", suggestion.country, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n\n  const inputProps = {\n    placeholder: 'Search City or Zip Code',\n    search,\n    onChange: () => handleChange(event),\n    onSubmit: () => handleSubmit(event)\n  };\n  return /*#__PURE__*/_jsxDEV(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n    onSuggestionsClearRequested: () => handleClearSearch(),\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    inputProps: inputProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\nexport default SearchBar3;","map":{"version":3,"sources":["/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/Components/SearchBar3.js"],"names":["React","Autosuggest","Table","cityList","cities","SearchBar3","search","setSearch","useState","suggestions","setSuggestions","getSuggestions","inputValue","trim","toLowerCase","inputLength","length","filter","city","slice","handleChange","event","target","value","handleClearSearch","handleSubmit","router","push","onSuggestionsFetchRequested","setState","getSuggestionValue","suggestion","country","renderSuggestion","inputProps","placeholder","onChange","onSubmit"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAGA,MAAMC,MAAM,GAAGD,QAAf;;AAGA,SAASE,UAAT,GAAsB;AACpB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,KAAK,CAACQ,QAAN,CAAe,EAAf,CAA5B;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,KAAK,CAACQ,QAAN,CAAe,EAAf,CAAtC;;AAEA,QAAMG,cAAc,GAAGL,MAAM,IAAI;AAC/B,UAAMM,UAAU,GAAGN,MAAM,CAACO,IAAP,GAAcC,WAAd,EAAnB;AACA,UAAMC,WAAW,GAAGH,UAAU,CAACI,MAA/B;AAEA,WAAOD,WAAW,GAAG,CAAd,GAAkB,EAAlB,GAAuBX,MAAM,CAACa,MAAP,CAAcC,IAAI,IAC9CA,IAAI,CAACA,IAAL,CAAUJ,WAAV,GAAwBK,KAAxB,CAA8B,CAA9B,EAAiCJ,WAAjC,MAAkDH,UADtB,CAA9B;AAGD,GAPD;;AAUA,WAASQ,YAAT,CAAsBC,KAAtB,EAA6B;AAC3Bd,IAAAA,SAAS,CAACc,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAT;AACD;;AAED,WAASC,iBAAT,CAA2BH,KAA3B,EAAkC;AAChCd,IAAAA,SAAS,CAAC,EAAD,CAAT;AACAG,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD;;AAED,iBAAee,YAAf,CAA4BJ,KAA5B,EAAmC;AACjC,QAAIf,MAAM,CAACU,MAAP,GAAgB,CAApB,EAAuB;AACrBU,MAAAA,MAAM,CAACC,IAAP,CAAa,oBAAmBrB,MAAO,EAAvC,EADqB,CAErB;AACD;AACF;;AAED,QAAMsB,2BAA2B,GAAG,CAAC;AAAEtB,IAAAA;AAAF,GAAD,KAAgB;AAClD,SAAKuB,QAAL,CAAc;AACZpB,MAAAA,WAAW,EAAEE,cAAc,CAACL,MAAD;AADf,KAAd;AAGD,GAJD;;AAOA,QAAMwB,kBAAkB,GAAGC,UAAU,IAAIA,UAAU,CAACb,IAAX,GAAkB,IAAlB,GAAyBa,UAAU,CAACC,OAA7E;;AAGA,QAAMC,gBAAgB,GAAGF,UAAU,iBACjC;AAAK,IAAA,KAAK,EAAC,cAAX;AAAA,oBAA4BA,UAAU,CAACb,IAAvC,QAA+Ca,UAAU,CAACC,OAA1D;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAIA,QAAME,UAAU,GAAG;AACjBC,IAAAA,WAAW,EAAE,yBADI;AAEjB7B,IAAAA,MAFiB;AAGjB8B,IAAAA,QAAQ,EAAE,MAAMhB,YAAY,CAACC,KAAD,CAHX;AAIjBgB,IAAAA,QAAQ,EAAE,MAAMZ,YAAY,CAACJ,KAAD;AAJX,GAAnB;AAOA,sBACE,QAAC,WAAD;AACE,IAAA,WAAW,EAAEZ,WADf;AAEE,IAAA,2BAA2B,EAAEmB,2BAF/B;AAGE,IAAA,2BAA2B,EAAE,MAAMJ,iBAAiB,EAHtD;AAIE,IAAA,kBAAkB,EAAEM,kBAJtB;AAKE,IAAA,gBAAgB,EAAEG,gBALpB;AAME,IAAA,UAAU,EAAEC;AANd;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;AAKD,eAAe7B,UAAf","sourcesContent":["import React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport Table from 'react-bootstrap/Table';\nimport { cityList } from \"../public/city-list\";\n\n\nconst cities = cityList;\n\n\nfunction SearchBar3() {\n  const [search, setSearch] = React.useState(\"\");\n  const [suggestions, setSuggestions] = React.useState([]);\n\n  const getSuggestions = search => {\n    const inputValue = search.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    return inputLength < 3 ? [] : cities.filter(city =>\n      city.city.toLowerCase().slice(0, inputLength) === inputValue\n    );\n  };\n\n\n  function handleChange(event) {\n    setSearch(event.target.value);\n  }\n\n  function handleClearSearch(event) {\n    setSearch(\"\");\n    setSuggestions([])\n  }\n\n  async function handleSubmit(event) {\n    if (search.length > 1) {\n      router.push(`/location?search=${search}`);\n      // setSearch(\"\");\n    }\n  }\n\n  const onSuggestionsFetchRequested = ({ search }) => {\n    this.setState({\n      suggestions: getSuggestions(search)\n    });\n  };\n\n\n  const getSuggestionValue = suggestion => suggestion.city + \", \" + suggestion.country;\n\n\n  const renderSuggestion = suggestion => (\n    <div class=\"search-table\"> {suggestion.city}, {suggestion.country} </div>\n  );\n\n  const inputProps = {\n    placeholder: 'Search City or Zip Code',\n    search,\n    onChange: () => handleChange(event),\n    onSubmit: () => handleSubmit(event)\n  };\n\n  return (\n    <Autosuggest\n      suggestions={suggestions}\n      onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n      onSuggestionsClearRequested={() => handleClearSearch()}\n      getSuggestionValue={getSuggestionValue}\n      renderSuggestion={renderSuggestion}\n      inputProps={inputProps}\n    />\n  );\n\n}\n\n\n\n\nexport default SearchBar3;\n"]},"metadata":{},"sourceType":"module"}