{"ast":null,"code":"import _regeneratorRuntime from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/regenerator\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _asyncToGenerator from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/Components/SearchBar3.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport Table from 'react-bootstrap/Table';\nimport { cityList } from \"../public/city-list\";\nvar cities = cityList;\n\nfunction SearchBar3() {\n  _s();\n\n  var _this = this;\n\n  var _React$useState = React.useState(\"lond\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      search = _React$useState2[0],\n      setSearch = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      suggestions = _React$useState4[0],\n      setSuggestions = _React$useState4[1];\n\n  function getSuggestions(search) {\n    var inputValue = search.trim().toLowerCase();\n    var inputLength = inputValue.length;\n    return inputLength < 3 ? [] : cities.filter(function (city) {\n      return city.city.toLowerCase().slice(0, inputLength) === inputValue;\n    });\n  }\n\n  ;\n  console.log(getSuggestions(search));\n\n  function handleChange(event) {\n    setSearch(event.target.value);\n  }\n\n  function handleClearSearch(event) {\n    setSearch(\"\");\n    setSuggestions([]);\n  }\n\n  function handleSubmit(_x) {\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  function _handleSubmit() {\n    _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (search.length > 1) {\n                router.push(\"/location?search=\".concat(search)); // setSearch(\"\");\n              }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _handleSubmit.apply(this, arguments);\n  }\n\n  var onSuggestionsFetchRequested = function onSuggestionsFetchRequested(_ref) {\n    var search = _ref.search;\n\n    _this.setState({\n      suggestions: getSuggestions(search)\n    });\n  };\n\n  var getSuggestionValue = function getSuggestionValue(suggestion) {\n    return suggestion.city + \", \" + suggestion.country;\n  };\n\n  var renderSuggestion = function renderSuggestion(suggestion) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      \"class\": \"search-table\",\n      children: [\" \", suggestion.city, \", \", suggestion.country, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }, _this);\n  };\n\n  var inputProps = {\n    placeholder: 'Search City or Zip Code',\n    search: search,\n    onChange: function onChange() {\n      return handleChange(event);\n    },\n    onSubmit: function onSubmit() {\n      return handleSubmit(event);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(SearchBar3, \"clARRfec2vB5gft2H51f5jUunNQ=\");\n\n_c = SearchBar3;\nexport default SearchBar3;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar3\");","map":{"version":3,"sources":["/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/Components/SearchBar3.js"],"names":["React","Autosuggest","Table","cityList","cities","SearchBar3","useState","search","setSearch","suggestions","setSuggestions","getSuggestions","inputValue","trim","toLowerCase","inputLength","length","filter","city","slice","console","log","handleChange","event","target","value","handleClearSearch","handleSubmit","router","push","onSuggestionsFetchRequested","setState","getSuggestionValue","suggestion","country","renderSuggestion","inputProps","placeholder","onChange","onSubmit"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAGA,IAAMC,MAAM,GAAGD,QAAf;;AAGA,SAASE,UAAT,GAAsB;AAAA;;AAAA;;AAAA,wBACQL,KAAK,CAACM,QAAN,CAAe,MAAf,CADR;AAAA;AAAA,MACbC,MADa;AAAA,MACLC,SADK;;AAAA,yBAEkBR,KAAK,CAACM,QAAN,CAAe,EAAf,CAFlB;AAAA;AAAA,MAEbG,WAFa;AAAA,MAEAC,cAFA;;AAMpB,WAASC,cAAT,CAAwBJ,MAAxB,EAAgC;AAC9B,QAAMK,UAAU,GAAGL,MAAM,CAACM,IAAP,GAAcC,WAAd,EAAnB;AACA,QAAMC,WAAW,GAAGH,UAAU,CAACI,MAA/B;AAEA,WAAOD,WAAW,GAAG,CAAd,GAAkB,EAAlB,GAAuBX,MAAM,CAACa,MAAP,CAAc,UAAAC,IAAI;AAAA,aAC9CA,IAAI,CAACA,IAAL,CAAUJ,WAAV,GAAwBK,KAAxB,CAA8B,CAA9B,EAAiCJ,WAAjC,MAAkDH,UADJ;AAAA,KAAlB,CAA9B;AAGD;;AAAA;AAECQ,EAAAA,OAAO,CAACC,GAAR,CAAYV,cAAc,CAACJ,MAAD,CAA1B;;AAGF,WAASe,YAAT,CAAsBC,KAAtB,EAA6B;AAC3Bf,IAAAA,SAAS,CAACe,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAT;AACD;;AAED,WAASC,iBAAT,CAA2BH,KAA3B,EAAkC;AAChCf,IAAAA,SAAS,CAAC,EAAD,CAAT;AACAE,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD;;AAzBmB,WA2BLiB,YA3BK;AAAA;AAAA;;AAAA;AAAA,6EA2BpB,iBAA4BJ,KAA5B;AAAA;AAAA;AAAA;AAAA;AACE,kBAAIhB,MAAM,CAACS,MAAP,GAAgB,CAApB,EAAuB;AACrBY,gBAAAA,MAAM,CAACC,IAAP,4BAAgCtB,MAAhC,GADqB,CAErB;AACD;;AAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3BoB;AAAA;AAAA;;AAkCpB,MAAMuB,2BAA2B,GAAG,SAA9BA,2BAA8B,OAAgB;AAAA,QAAbvB,MAAa,QAAbA,MAAa;;AAClD,IAAA,KAAI,CAACwB,QAAL,CAAc;AACZtB,MAAAA,WAAW,EAAEE,cAAc,CAACJ,MAAD;AADf,KAAd;AAGD,GAJD;;AAOA,MAAMyB,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,UAAU;AAAA,WAAIA,UAAU,CAACf,IAAX,GAAkB,IAAlB,GAAyBe,UAAU,CAACC,OAAxC;AAAA,GAArC;;AAGA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAF,UAAU;AAAA,wBACjC;AAAK,eAAM,cAAX;AAAA,sBAA4BA,UAAU,CAACf,IAAvC,QAA+Ce,UAAU,CAACC,OAA1D;AAAA;AAAA;AAAA;AAAA;AAAA,aADiC;AAAA,GAAnC;;AAIA,MAAME,UAAU,GAAG;AACjBC,IAAAA,WAAW,EAAE,yBADI;AAEjB9B,IAAAA,MAAM,EAANA,MAFiB;AAGjB+B,IAAAA,QAAQ,EAAE;AAAA,aAAMhB,YAAY,CAACC,KAAD,CAAlB;AAAA,KAHO;AAIjBgB,IAAAA,QAAQ,EAAE;AAAA,aAAMZ,YAAY,CAACJ,KAAD,CAAlB;AAAA;AAJO,GAAnB;AAOA,sBACE,qCADF;AAKD;;GA5DQlB,U;;KAAAA,U;AAiET,eAAeA,UAAf","sourcesContent":["import React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport Table from 'react-bootstrap/Table';\nimport { cityList } from \"../public/city-list\";\n\n\nconst cities = cityList;\n\n\nfunction SearchBar3() {\n  const [search, setSearch] = React.useState(\"lond\");\n  const [suggestions, setSuggestions] = React.useState([]);\n\n\n\n  function getSuggestions(search) {\n    const inputValue = search.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    return inputLength < 3 ? [] : cities.filter(city =>\n      city.city.toLowerCase().slice(0, inputLength) === inputValue\n    );\n  };\n\n    console.log(getSuggestions(search));\n\n\n  function handleChange(event) {\n    setSearch(event.target.value);\n  }\n\n  function handleClearSearch(event) {\n    setSearch(\"\");\n    setSuggestions([])\n  }\n\n  async function handleSubmit(event) {\n    if (search.length > 1) {\n      router.push(`/location?search=${search}`);\n      // setSearch(\"\");\n    }\n  }\n\n  const onSuggestionsFetchRequested = ({ search }) => {\n    this.setState({\n      suggestions: getSuggestions(search)\n    });\n  };\n\n\n  const getSuggestionValue = suggestion => suggestion.city + \", \" + suggestion.country;\n\n\n  const renderSuggestion = suggestion => (\n    <div class=\"search-table\"> {suggestion.city}, {suggestion.country} </div>\n  );\n\n  const inputProps = {\n    placeholder: 'Search City or Zip Code',\n    search,\n    onChange: () => handleChange(event),\n    onSubmit: () => handleSubmit(event)\n  };\n\n  return (\n    <>\n    </>\n  );\n\n}\n\n\n\n\nexport default SearchBar3;\n"]},"metadata":{},"sourceType":"module"}