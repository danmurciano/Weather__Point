{"ast":null,"code":"import _classCallCheck from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/Components/SearchBar3.js\",\n    _this = this;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport Table from 'react-bootstrap/Table';\nimport { Form, Input, Button, Icon } from \"semantic-ui-react\";\nimport { cityList } from \"../public/city-list\";\nvar cities = cityList;\n\nvar renderInputComponent = function renderInputComponent(inputProps) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"class\": \"search-bar\",\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n        transparent: true,\n        size: \"large\",\n        className: \"searchBarInput\",\n        name: \"search\",\n        placeholder: \"Search City or Zip Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        size: \"small\",\n        className: \"searchBarButton\",\n        type: \"submit\",\n        icon: value.length < 1 ? \"search\" : \"delete\",\n        onClick: search.length < 1 ? handleSubmit : handleClearSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 3\n  }, _this);\n};\n\nvar getSuggestions = function getSuggestions(value) {\n  var inputValue = value.trim().toLowerCase();\n  var inputLength = inputValue.length;\n  return inputLength < 3 ? [] : cities.filter(function (city) {\n    return city.city.toLowerCase().slice(0, inputLength) === inputValue;\n  });\n};\n\nvar getSuggestionValue = function getSuggestionValue(suggestion) {\n  return suggestion.city + \", \" + suggestion.country;\n};\n\nvar renderSuggestion = function renderSuggestion(suggestion) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"class\": \"search-table\",\n    children: [suggestion.city, \", \", suggestion.country]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 3\n  }, _this);\n};\n\nvar SearchBar3 = /*#__PURE__*/function (_React$Component) {\n  _inherits(SearchBar3, _React$Component);\n\n  var _super = _createSuper(SearchBar3);\n\n  function SearchBar3() {\n    var _this2;\n\n    _classCallCheck(this, SearchBar3);\n\n    _this2 = _super.call(this); // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n\n    _defineProperty(_assertThisInitialized(_this2), \"onChange\", function (event, _ref) {\n      var newValue = _ref.newValue;\n\n      _this2.setState({\n        value: newValue\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"onSuggestionsFetchRequested\", function (_ref2) {\n      var value = _ref2.value;\n\n      _this2.setState({\n        suggestions: getSuggestions(value)\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"onSuggestionsClearRequested\", function () {\n      _this2.setState({\n        suggestions: []\n      });\n    });\n\n    _this2.state = {\n      value: '',\n      suggestions: []\n    };\n    return _this2;\n  }\n\n  _createClass(SearchBar3, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions;\n      var inputProps = {\n        placeholder: 'Search City or Zip Code',\n        value: value,\n        onChange: this.onChange,\n        onSubmit: this.handleSubmit\n      };\n      return /*#__PURE__*/_jsxDEV(Autosuggest, {\n        suggestions: suggestions,\n        onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n        onSuggestionHighlighted: this.onSuggestionHighlighted,\n        getSuggestionValue: getSuggestionValue,\n        renderInputComponent: renderInputComponent,\n        renderSuggestion: renderSuggestion,\n        inputProps: inputProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return SearchBar3;\n}(React.Component);\n\nexport default SearchBar3;","map":{"version":3,"sources":["/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/Components/SearchBar3.js"],"names":["React","Autosuggest","Table","Form","Input","Button","Icon","cityList","cities","renderInputComponent","inputProps","value","length","search","handleSubmit","handleClearSearch","getSuggestions","inputValue","trim","toLowerCase","inputLength","filter","city","slice","getSuggestionValue","suggestion","country","renderSuggestion","SearchBar3","event","newValue","setState","suggestions","state","placeholder","onChange","onSubmit","onSuggestionsFetchRequested","onSuggestionsClearRequested","onSuggestionHighlighted","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport Table from 'react-bootstrap/Table';\nimport { Form, Input, Button, Icon } from \"semantic-ui-react\";\nimport { cityList } from \"../public/city-list\";\n\n\nconst cities = cityList;\n\n\nconst renderInputComponent = inputProps => (\n  <div class=\"search-bar\">\n    <Form>\n      <Form.Input\n        transparent\n        size=\"large\"\n        className=\"searchBarInput\"\n        name=\"search\"\n        placeholder=\"Search City or Zip Code\"\n      />\n      <Button\n        size=\"small\"\n        className=\"searchBarButton\"\n        type=\"submit\"\n        icon={value.length < 1 ? \"search\" : \"delete\"}\n        onClick={search.length < 1 ? handleSubmit : handleClearSearch}\n      />\n    </Form>\n  </div>\n);\n\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  return inputLength < 3 ? [] : cities.filter(city =>\n    city.city.toLowerCase().slice(0, inputLength) === inputValue\n  );\n};\n\n\nconst getSuggestionValue = suggestion => suggestion.city + \", \" + suggestion.country;\n\n\nconst renderSuggestion = suggestion => (\n  <div class=\"search-table\">\n    {suggestion.city}, {suggestion.country}\n  </div>\n);\n\nclass SearchBar3 extends React.Component {\n  constructor() {\n    super();\n\n    // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    const inputProps = {\n      placeholder: 'Search City or Zip Code',\n      value,\n      onChange: this.onChange,\n      onSubmit: this.handleSubmit\n    };\n\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        onSuggestionHighlighted={this.onSuggestionHighlighted}\n        getSuggestionValue={getSuggestionValue}\n        renderInputComponent={renderInputComponent}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n      />\n    );\n  }\n}\n\nexport default SearchBar3;\n"]},"metadata":{},"sourceType":"module"}