{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/Components/SearchBar3.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport Table from 'react-bootstrap/Table';\nimport { cityList } from \"../public/city-list\";\nvar cities = cityList; // Teach Autosuggest how to calculate suggestions for any given input value.\n\nvar getSuggestions = function getSuggestions(value) {\n  var inputValue = value.trim().toLowerCase();\n  var inputLength = inputValue.length;\n  return inputLength < 3 ? [] : cities.filter(function (city) {\n    return city.city.toLowerCase().slice(0, inputLength) === inputValue;\n  });\n};\n\nfunction getSuggestionValue(suggestion) {\n  return \"\".concat(suggestion.city, \", \").concat(suggestion.country);\n}\n\nfunction renderSuggestion(suggestion, _ref) {\n  var query = _ref.query;\n  var suggestionText = \"\".concat(suggestion.city, \", \").concat(suggestion.country); // const matches = AutosuggestHighlightMatch(suggestionText, query);\n  // const parts = AutosuggestHighlightParse(suggestionText, matches);\n}\n\nvar SearchBar3 = /*#__PURE__*/function (_React$Component) {\n  _inherits(SearchBar3, _React$Component);\n\n  var _super = _createSuper(SearchBar3);\n\n  function SearchBar3() {\n    var _this;\n\n    _classCallCheck(this, SearchBar3);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (event, _ref2) {\n      var newValue = _ref2.newValue;\n\n      _this.setState({\n        value: newValue\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSuggestionsFetchRequested\", function (_ref3) {\n      var value = _ref3.value;\n\n      _this.setState({\n        suggestions: getSuggestions(value)\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSuggestionsClearRequested\", function () {\n      _this.setState({\n        suggestions: []\n      });\n    });\n\n    _this.state = {\n      value: '',\n      suggestions: []\n    };\n    return _this;\n  }\n\n  _createClass(SearchBar3, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions; // Autosuggest will pass through all these props to the input.\n\n      var inputProps = {\n        placeholder: 'Search City or Zip Code',\n        value: value,\n        onChange: this.onChange\n      }; // Finally, render it!\n\n      return /*#__PURE__*/_jsxDEV(Autosuggest, {\n        suggestions: suggestions,\n        onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n        getSuggestionValue: getSuggestionValue,\n        renderSuggestion: renderSuggestion,\n        inputProps: inputProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return SearchBar3;\n}(React.Component);\n\nexport default SearchBar3;","map":{"version":3,"sources":["/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/Components/SearchBar3.js"],"names":["React","Autosuggest","Table","cityList","cities","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","city","slice","getSuggestionValue","suggestion","country","renderSuggestion","query","suggestionText","SearchBar3","event","newValue","setState","suggestions","state","inputProps","placeholder","onChange","onSuggestionsFetchRequested","onSuggestionsClearRequested","Component"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAGA,IAAMC,MAAM,GAAGD,QAAf,C,CAGA;;AACA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,KAAK,EAAI;AAC9B,MAAMC,UAAU,GAAGD,KAAK,CAACE,IAAN,GAAaC,WAAb,EAAnB;AACA,MAAMC,WAAW,GAAGH,UAAU,CAACI,MAA/B;AAEA,SAAOD,WAAW,GAAG,CAAd,GAAkB,EAAlB,GAAuBN,MAAM,CAACQ,MAAP,CAAc,UAAAC,IAAI;AAAA,WAC9CA,IAAI,CAACA,IAAL,CAAUJ,WAAV,GAAwBK,KAAxB,CAA8B,CAA9B,EAAiCJ,WAAjC,MAAkDH,UADJ;AAAA,GAAlB,CAA9B;AAGD,CAPD;;AASA,SAASQ,kBAAT,CAA4BC,UAA5B,EAAwC;AACtC,mBAAUA,UAAU,CAACH,IAArB,eAA8BG,UAAU,CAACC,OAAzC;AACD;;AAGD,SAASC,gBAAT,CAA0BF,UAA1B,QAAiD;AAAA,MAATG,KAAS,QAATA,KAAS;AAC/C,MAAMC,cAAc,aAAMJ,UAAU,CAACH,IAAjB,eAA0BG,UAAU,CAACC,OAArC,CAApB,CAD+C,CAE/C;AACA;AACD;;IAIKI,U;;;;;AACJ,wBAAc;AAAA;;AAAA;;AACZ;;AADY,+DASH,UAACC,KAAD,SAAyB;AAAA,UAAfC,QAAe,SAAfA,QAAe;;AAClC,YAAKC,QAAL,CAAc;AACZlB,QAAAA,KAAK,EAAEiB;AADK,OAAd;AAGD,KAba;;AAAA,kFAiBgB,iBAAe;AAAA,UAAZjB,KAAY,SAAZA,KAAY;;AAC3C,YAAKkB,QAAL,CAAc;AACZC,QAAAA,WAAW,EAAEpB,cAAc,CAACC,KAAD;AADf,OAAd;AAGD,KArBa;;AAAA,kFAwBgB,YAAM;AAClC,YAAKkB,QAAL,CAAc;AACZC,QAAAA,WAAW,EAAE;AADD,OAAd;AAGD,KA5Ba;;AAGZ,UAAKC,KAAL,GAAa;AACXpB,MAAAA,KAAK,EAAE,EADI;AAEXmB,MAAAA,WAAW,EAAE;AAFF,KAAb;AAHY;AAOb;;;;6BAuBQ;AAAA,wBACwB,KAAKC,KAD7B;AAAA,UACCpB,KADD,eACCA,KADD;AAAA,UACQmB,WADR,eACQA,WADR,EAGP;;AACA,UAAME,UAAU,GAAG;AACjBC,QAAAA,WAAW,EAAE,yBADI;AAEjBtB,QAAAA,KAAK,EAALA,KAFiB;AAGjBuB,QAAAA,QAAQ,EAAE,KAAKA;AAHE,OAAnB,CAJO,CAWP;;AACA,0BACE,QAAC,WAAD;AACE,QAAA,WAAW,EAAEJ,WADf;AAEE,QAAA,2BAA2B,EAAE,KAAKK,2BAFpC;AAGE,QAAA,2BAA2B,EAAE,KAAKC,2BAHpC;AAIE,QAAA,kBAAkB,EAAEhB,kBAJtB;AAKE,QAAA,gBAAgB,EAAEG,gBALpB;AAME,QAAA,UAAU,EAAES;AANd;AAAA;AAAA;AAAA;AAAA,cADF;AAUD;;;;EArDsB3B,KAAK,CAACgC,S;;AAwD/B,eAAeX,UAAf","sourcesContent":["import React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport Table from 'react-bootstrap/Table';\nimport { cityList } from \"../public/city-list\";\n\n\nconst cities = cityList;\n\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  return inputLength < 3 ? [] : cities.filter(city =>\n    city.city.toLowerCase().slice(0, inputLength) === inputValue\n  );\n};\n\nfunction getSuggestionValue(suggestion) {\n  return `${suggestion.city}, ${suggestion.country}`;\n}\n\n\nfunction renderSuggestion(suggestion, { query }) {\n  const suggestionText = `${suggestion.city}, ${suggestion.country}`;\n  // const matches = AutosuggestHighlightMatch(suggestionText, query);\n  // const parts = AutosuggestHighlightParse(suggestionText, matches);\n}\n\n\n\nclass SearchBar3 extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: 'Search City or Zip Code',\n      value,\n      onChange: this.onChange\n    };\n\n\n    // Finally, render it!\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n      />\n    );\n  }\n}\n\nexport default SearchBar3;\n"]},"metadata":{},"sourceType":"module"}