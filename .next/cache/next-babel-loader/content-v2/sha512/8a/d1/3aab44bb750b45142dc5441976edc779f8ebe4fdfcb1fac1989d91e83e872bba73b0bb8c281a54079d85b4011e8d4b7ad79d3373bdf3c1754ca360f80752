{"ast":null,"code":"import _classCallCheck from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/Components/SearchBar3.js\",\n    _this = this;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { cityList } from \"../public/city-list\";\nvar cities = cityList; // Imagine you have a list of languages that you'd like to autosuggest.\n// const languages = [\n//   {\n//     name: 'C',\n//     year: 1972\n//   },\n//   {\n//     name: 'Elm',\n//     year: 2012\n//   },\n//   ...\n// ];\n// Teach Autosuggest how to calculate suggestions for any given input value.\n\nvar getSuggestions = function getSuggestions(value) {\n  var inputValue = value.trim().toLowerCase();\n  var inputLength = inputValue.length;\n  return inputLength === 0 ? [] : cities.filter(function (city) {\n    return city.city.toLowerCase().slice(0, inputLength) === inputValue;\n  });\n}; // When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\n\n\nvar getSuggestionValue = function getSuggestionValue(suggestion) {\n  return suggestion.name;\n}; // Use your imagination to render suggestions.\n\n\nvar renderSuggestion = function renderSuggestion(suggestion) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: suggestion.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 3\n  }, _this);\n};\n\nvar SearchBar3 = /*#__PURE__*/function (_React$Component) {\n  _inherits(SearchBar3, _React$Component);\n\n  var _super = _createSuper(SearchBar3);\n\n  function SearchBar3() {\n    var _this2;\n\n    _classCallCheck(this, SearchBar3);\n\n    _this2 = _super.call(this); // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n\n    _defineProperty(_assertThisInitialized(_this2), \"onChange\", function (event, _ref) {\n      var newValue = _ref.newValue;\n\n      _this2.setState({\n        value: newValue\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"onSuggestionsFetchRequested\", function (_ref2) {\n      var value = _ref2.value;\n\n      _this2.setState({\n        suggestions: getSuggestions(value)\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this2), \"onSuggestionsClearRequested\", function () {\n      _this2.setState({\n        suggestions: []\n      });\n    });\n\n    _this2.state = {\n      value: '',\n      suggestions: []\n    };\n    return _this2;\n  }\n\n  _createClass(SearchBar3, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions; // Autosuggest will pass through all these props to the input.\n\n      var inputProps = {\n        placeholder: 'Type a programming language',\n        value: value,\n        onChange: this.onChange\n      }; // Finally, render it!\n\n      return /*#__PURE__*/_jsxDEV(Autosuggest, {\n        suggestions: suggestions,\n        onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n        getSuggestionValue: getSuggestionValue,\n        renderSuggestion: renderSuggestion,\n        inputProps: inputProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return SearchBar3;\n}(React.Component);\n\nexport default SearchBar3;","map":{"version":3,"sources":["/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/Components/SearchBar3.js"],"names":["React","Autosuggest","cityList","cities","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","city","slice","getSuggestionValue","suggestion","name","renderSuggestion","SearchBar3","event","newValue","setState","suggestions","state","inputProps","placeholder","onChange","onSuggestionsFetchRequested","onSuggestionsClearRequested","Component"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAGA,IAAMC,MAAM,GAAGD,QAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,KAAK,EAAI;AAC9B,MAAMC,UAAU,GAAGD,KAAK,CAACE,IAAN,GAAaC,WAAb,EAAnB;AACA,MAAMC,WAAW,GAAGH,UAAU,CAACI,MAA/B;AAEA,SAAOD,WAAW,KAAK,CAAhB,GAAoB,EAApB,GAAyBN,MAAM,CAACQ,MAAP,CAAc,UAAAC,IAAI;AAAA,WAChDA,IAAI,CAACA,IAAL,CAAUJ,WAAV,GAAwBK,KAAxB,CAA8B,CAA9B,EAAiCJ,WAAjC,MAAkDH,UADF;AAAA,GAAlB,CAAhC;AAGD,CAPD,C,CASA;AACA;AACA;;;AACA,IAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,UAAU;AAAA,SAAIA,UAAU,CAACC,IAAf;AAAA,CAArC,C,CAEA;;;AACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAF,UAAU;AAAA,sBACjC;AAAA,cACGA,UAAU,CAACC;AADd;AAAA;AAAA;AAAA;AAAA,WADiC;AAAA,CAAnC;;IAMME,U;;;;;AACJ,wBAAc;AAAA;;AAAA;;AACZ,+BADY,CAGZ;AACA;AACA;AACA;AACA;;AAPY,gEAcH,UAACC,KAAD,QAAyB;AAAA,UAAfC,QAAe,QAAfA,QAAe;;AAClC,aAAKC,QAAL,CAAc;AACZhB,QAAAA,KAAK,EAAEe;AADK,OAAd;AAGD,KAlBa;;AAAA,mFAsBgB,iBAAe;AAAA,UAAZf,KAAY,SAAZA,KAAY;;AAC3C,aAAKgB,QAAL,CAAc;AACZC,QAAAA,WAAW,EAAElB,cAAc,CAACC,KAAD;AADf,OAAd;AAGD,KA1Ba;;AAAA,mFA6BgB,YAAM;AAClC,aAAKgB,QAAL,CAAc;AACZC,QAAAA,WAAW,EAAE;AADD,OAAd;AAGD,KAjCa;;AAQZ,WAAKC,KAAL,GAAa;AACXlB,MAAAA,KAAK,EAAE,EADI;AAEXiB,MAAAA,WAAW,EAAE;AAFF,KAAb;AARY;AAYb;;;;6BAuBQ;AAAA,wBACwB,KAAKC,KAD7B;AAAA,UACClB,KADD,eACCA,KADD;AAAA,UACQiB,WADR,eACQA,WADR,EAGP;;AACA,UAAME,UAAU,GAAG;AACjBC,QAAAA,WAAW,EAAE,6BADI;AAEjBpB,QAAAA,KAAK,EAALA,KAFiB;AAGjBqB,QAAAA,QAAQ,EAAE,KAAKA;AAHE,OAAnB,CAJO,CAUP;;AACA,0BACE,QAAC,WAAD;AACE,QAAA,WAAW,EAAEJ,WADf;AAEE,QAAA,2BAA2B,EAAE,KAAKK,2BAFpC;AAGE,QAAA,2BAA2B,EAAE,KAAKC,2BAHpC;AAIE,QAAA,kBAAkB,EAAEd,kBAJtB;AAKE,QAAA,gBAAgB,EAAEG,gBALpB;AAME,QAAA,UAAU,EAAEO;AANd;AAAA;AAAA;AAAA;AAAA,cADF;AAUD;;;;EAzDsBxB,KAAK,CAAC6B,S;;AA4D/B,eAAeX,UAAf","sourcesContent":["import React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { cityList } from \"../public/city-list\";\n\n\nconst cities = cityList;\n\n// Imagine you have a list of languages that you'd like to autosuggest.\n// const languages = [\n//   {\n//     name: 'C',\n//     year: 1972\n//   },\n//   {\n//     name: 'Elm',\n//     year: 2012\n//   },\n//   ...\n// ];\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  return inputLength === 0 ? [] : cities.filter(city =>\n    city.city.toLowerCase().slice(0, inputLength) === inputValue\n  );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.name;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n  <div>\n    {suggestion.name}\n  </div>\n);\n\nclass SearchBar3 extends React.Component {\n  constructor() {\n    super();\n\n    // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: 'Type a programming language',\n      value,\n      onChange: this.onChange\n    };\n\n    // Finally, render it!\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n      />\n    );\n  }\n}\n\nexport default SearchBar3;\n"]},"metadata":{},"sourceType":"module"}