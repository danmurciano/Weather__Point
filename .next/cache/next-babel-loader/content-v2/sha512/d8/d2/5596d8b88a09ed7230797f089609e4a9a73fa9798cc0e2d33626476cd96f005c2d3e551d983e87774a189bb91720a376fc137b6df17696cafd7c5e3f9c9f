{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/Components/SearchBar4.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Button from \"./Button\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { cityList } from \"../public/city-list\";\nconst options = cityList;\nconst useStyles = makeStyles({\n  option: {\n    fontSize: 12,\n    backgroundColor: \"white\",\n    '& > span': {\n      marginRight: 10,\n      fontSize: 12\n    }\n  }\n});\n\nfunction handleChange(event) {\n  setSearch(event.target.value);\n}\n\nfunction handleClearSearch(event) {\n  setSearch(\"\");\n  handleSubmit(event);\n}\n\nasync function handleSubmit(event) {\n  if (search.length > 1) {\n    router.push(`/location?search=${search}`); // setSearch(\"\");\n  }\n}\n\nexport default function SearchBar4() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(options[0].city);\n  const [inputValue, setInputValue] = React.useState('');\n  console.log(options[0]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: `value: ${value !== null ? `'${value}'` : 'null'}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: `inputValue: '${inputValue}'`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n      value: value,\n      onChange: (event, newValue) => {\n        setValue(newValue);\n      },\n      inputValue: inputValue,\n      onInputChange: (event, newInputValue) => {\n        setInputValue(newInputValue);\n      },\n      id: \"controllable-states-demo\",\n      options: options.map(option => option.city + option.country),\n      style: {\n        width: 300\n      },\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n        label: \"Controllable\",\n        variant: \"outlined\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 3\n  }, this);\n}","map":{"version":3,"sources":["/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/Components/SearchBar4.js"],"names":["React","TextField","Autocomplete","Button","makeStyles","cityList","options","useStyles","option","fontSize","backgroundColor","marginRight","handleChange","event","setSearch","target","value","handleClearSearch","handleSubmit","search","length","router","push","SearchBar4","classes","setValue","useState","city","inputValue","setInputValue","console","log","newValue","newInputValue","map","country","width","params"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAGA,MAAMC,OAAO,GAAGD,QAAhB;AAGA,MAAME,SAAS,GAAGH,UAAU,CAAC;AAC3BI,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAE,EADJ;AAENC,IAAAA,eAAe,EAAE,OAFX;AAGN,gBAAY;AACVC,MAAAA,WAAW,EAAE,EADH;AAEVF,MAAAA,QAAQ,EAAE;AAFA;AAHN;AADmB,CAAD,CAA5B;;AAWA,SAASG,YAAT,CAAsBC,KAAtB,EAA6B;AAC3BC,EAAAA,SAAS,CAACD,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAT;AACD;;AAED,SAASC,iBAAT,CAA2BJ,KAA3B,EAAkC;AAChCC,EAAAA,SAAS,CAAC,EAAD,CAAT;AACAI,EAAAA,YAAY,CAACL,KAAD,CAAZ;AACD;;AAED,eAAeK,YAAf,CAA4BL,KAA5B,EAAmC;AACjC,MAAIM,MAAM,CAACC,MAAP,GAAgB,CAApB,EAAuB;AACrBC,IAAAA,MAAM,CAACC,IAAP,CAAa,oBAAmBH,MAAO,EAAvC,EADqB,CAErB;AACD;AACF;;AAED,eAAe,SAASI,UAAT,GAAsB;AACnC,QAAMC,OAAO,GAAGjB,SAAS,EAAzB;AACA,QAAM,CAACS,KAAD,EAAQS,QAAR,IAAoBzB,KAAK,CAAC0B,QAAN,CAAepB,OAAO,CAAC,CAAD,CAAP,CAAWqB,IAA1B,CAA1B;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8B7B,KAAK,CAAC0B,QAAN,CAAe,EAAf,CAApC;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAYzB,OAAO,CAAC,CAAD,CAAnB;AAEA,sBACA;AAAA,4BACE;AAAA,gBAAO,UAASU,KAAK,KAAK,IAAV,GAAkB,IAAGA,KAAM,GAA3B,GAAgC,MAAO;AAAvD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAO,gBAAeY,UAAW;AAAjC;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEZ,KADT;AAEE,MAAA,QAAQ,EAAE,CAACH,KAAD,EAAQmB,QAAR,KAAqB;AAACP,QAAAA,QAAQ,CAACO,QAAD,CAAR;AAAmB,OAFrD;AAGE,MAAA,UAAU,EAAEJ,UAHd;AAIE,MAAA,aAAa,EAAE,CAACf,KAAD,EAAQoB,aAAR,KAA0B;AAACJ,QAAAA,aAAa,CAACI,aAAD,CAAb;AAA6B,OAJzE;AAKE,MAAA,EAAE,EAAC,0BALL;AAME,MAAA,OAAO,EAAE3B,OAAO,CAAC4B,GAAR,CAAY1B,MAAM,IAAIA,MAAM,CAACmB,IAAP,GAAcnB,MAAM,CAAC2B,OAA3C,CANX;AAOE,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAPT;AAQE,MAAA,WAAW,EAAGC,MAAD,iBAAY,QAAC,SAAD,kCAAeA,MAAf;AAAuB,QAAA,KAAK,EAAC,cAA7B;AAA4C,QAAA,OAAO,EAAC;AAApD;AAAA;AAAA;AAAA;AAAA;AAR3B;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAiBD","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Button from \"./Button\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { cityList } from \"../public/city-list\";\n\n\nconst options = cityList;\n\n\nconst useStyles = makeStyles({\n  option: {\n    fontSize: 12,\n    backgroundColor: \"white\",\n    '& > span': {\n      marginRight: 10,\n      fontSize: 12,\n    },\n  },\n});\n\nfunction handleChange(event) {\n  setSearch(event.target.value);\n}\n\nfunction handleClearSearch(event) {\n  setSearch(\"\");\n  handleSubmit(event);\n}\n\nasync function handleSubmit(event) {\n  if (search.length > 1) {\n    router.push(`/location?search=${search}`);\n    // setSearch(\"\");\n  }\n}\n\nexport default function SearchBar4() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(options[0].city);\n  const [inputValue, setInputValue] = React.useState('');\n\n  console.log(options[0]);\n\n  return (\n  <div>\n    <div>{`value: ${value !== null ? `'${value}'` : 'null'}`}</div>\n    <div>{`inputValue: '${inputValue}'`}</div>\n    <br />\n    <Autocomplete\n      value={value}\n      onChange={(event, newValue) => {setValue(newValue)}}\n      inputValue={inputValue}\n      onInputChange={(event, newInputValue) => {setInputValue(newInputValue)}}\n      id=\"controllable-states-demo\"\n      options={options.map(option => option.city + option.country)}\n      style={{ width: 300 }}\n      renderInput={(params) => <TextField {...params} label=\"Controllable\" variant=\"outlined\" />}\n    />\n  </div>\n);\n}\n"]},"metadata":{},"sourceType":"module"}