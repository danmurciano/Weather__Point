{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/Components/SearchBar3.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport Table from 'react-bootstrap/Table';\nimport { cityList } from \"../public/city-list\";\nimport SearchBar from \"./SearchBar\";\nconst cities = cityList;\n\nconst renderInputComponent = inputProps => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: /*#__PURE__*/_jsxDEV(SearchBar, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 3\n  }, this)\n}, void 0, false);\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  return inputLength < 3 ? [] : cities.filter(city => city.city.toLowerCase().slice(0, inputLength) === inputValue);\n};\n\nconst getSuggestionValue = suggestion => suggestion.city + \", \" + suggestion.country;\n\nconst renderSuggestion = suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n  class: \"search-table\",\n  children: [suggestion.city, \", \", suggestion.country]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 32,\n  columnNumber: 3\n}, this);\n\nclass SearchBar3 extends React.Component {\n  constructor() {\n    super(); // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n\n    _defineProperty(this, \"onChange\", (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    });\n\n    _defineProperty(this, \"onSuggestionsFetchRequested\", ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    });\n\n    _defineProperty(this, \"onSuggestionsClearRequested\", () => {\n      this.setState({\n        suggestions: []\n      });\n    });\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state;\n    const inputProps = {\n      placeholder: 'Search City or Zip Code',\n      value,\n      onChange: this.onChange,\n      onSubmit: this.handleSubmit\n    };\n    return /*#__PURE__*/_jsxDEV(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      onSuggestionHighlighted: this.onSuggestionHighlighted,\n      getSuggestionValue: getSuggestionValue,\n      renderInputComponent: renderInputComponent,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default SearchBar3;","map":{"version":3,"sources":["/Users/danmurciano/Web-Dev/Projects/Ideal-Weather/Components/SearchBar3.js"],"names":["React","Autosuggest","Table","cityList","SearchBar","cities","renderInputComponent","inputProps","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","city","slice","getSuggestionValue","suggestion","country","renderSuggestion","SearchBar3","Component","constructor","event","newValue","setState","suggestions","state","render","placeholder","onChange","onSubmit","handleSubmit","onSuggestionsFetchRequested","onSuggestionsClearRequested","onSuggestionHighlighted"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAGA,MAAMC,MAAM,GAAGF,QAAf;;AAGA,MAAMG,oBAAoB,GAAGC,UAAU,iBACrC;AAAA,yBACA,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AADA,iBADF;;AAOA,MAAMC,cAAc,GAAGC,KAAK,IAAI;AAC9B,QAAMC,UAAU,GAAGD,KAAK,CAACE,IAAN,GAAaC,WAAb,EAAnB;AACA,QAAMC,WAAW,GAAGH,UAAU,CAACI,MAA/B;AAEA,SAAOD,WAAW,GAAG,CAAd,GAAkB,EAAlB,GAAuBR,MAAM,CAACU,MAAP,CAAcC,IAAI,IAC9CA,IAAI,CAACA,IAAL,CAAUJ,WAAV,GAAwBK,KAAxB,CAA8B,CAA9B,EAAiCJ,WAAjC,MAAkDH,UADtB,CAA9B;AAGD,CAPD;;AAUA,MAAMQ,kBAAkB,GAAGC,UAAU,IAAIA,UAAU,CAACH,IAAX,GAAkB,IAAlB,GAAyBG,UAAU,CAACC,OAA7E;;AAGA,MAAMC,gBAAgB,GAAGF,UAAU,iBACjC;AAAK,EAAA,KAAK,EAAC,cAAX;AAAA,aACGA,UAAU,CAACH,IADd,QACsBG,UAAU,CAACC,OADjC;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;AAMA,MAAME,UAAN,SAAyBtB,KAAK,CAACuB,SAA/B,CAAyC;AACvCC,EAAAA,WAAW,GAAG;AACZ,YADY,CAGZ;AACA;AACA;AACA;AACA;;AAPY,sCAcH,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAyB;AAClC,WAAKC,QAAL,CAAc;AACZlB,QAAAA,KAAK,EAAEiB;AADK,OAAd;AAGD,KAlBa;;AAAA,yDAsBgB,CAAC;AAAEjB,MAAAA;AAAF,KAAD,KAAe;AAC3C,WAAKkB,QAAL,CAAc;AACZC,QAAAA,WAAW,EAAEpB,cAAc,CAACC,KAAD;AADf,OAAd;AAGD,KA1Ba;;AAAA,yDA6BgB,MAAM;AAClC,WAAKkB,QAAL,CAAc;AACZC,QAAAA,WAAW,EAAE;AADD,OAAd;AAGD,KAjCa;;AAQZ,SAAKC,KAAL,GAAa;AACXpB,MAAAA,KAAK,EAAE,EADI;AAEXmB,MAAAA,WAAW,EAAE;AAFF,KAAb;AAID;;AAwBDE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAErB,MAAAA,KAAF;AAASmB,MAAAA;AAAT,QAAyB,KAAKC,KAApC;AAEA,UAAMtB,UAAU,GAAG;AACjBwB,MAAAA,WAAW,EAAE,yBADI;AAEjBtB,MAAAA,KAFiB;AAGjBuB,MAAAA,QAAQ,EAAE,KAAKA,QAHE;AAIjBC,MAAAA,QAAQ,EAAE,KAAKC;AAJE,KAAnB;AAOA,wBACE,QAAC,WAAD;AACE,MAAA,WAAW,EAAEN,WADf;AAEE,MAAA,2BAA2B,EAAE,KAAKO,2BAFpC;AAGE,MAAA,2BAA2B,EAAE,KAAKC,2BAHpC;AAIE,MAAA,uBAAuB,EAAE,KAAKC,uBAJhC;AAKE,MAAA,kBAAkB,EAAEnB,kBALtB;AAME,MAAA,oBAAoB,EAAEZ,oBANxB;AAOE,MAAA,gBAAgB,EAAEe,gBAPpB;AAQE,MAAA,UAAU,EAAEd;AARd;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;;AA3DsC;;AA8DzC,eAAee,UAAf","sourcesContent":["import React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport Table from 'react-bootstrap/Table';\nimport { cityList } from \"../public/city-list\";\nimport SearchBar from \"./SearchBar\";\n\n\nconst cities = cityList;\n\n\nconst renderInputComponent = inputProps => (\n  <>\n  <SearchBar/>\n  </>\n);\n\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  return inputLength < 3 ? [] : cities.filter(city =>\n    city.city.toLowerCase().slice(0, inputLength) === inputValue\n  );\n};\n\n\nconst getSuggestionValue = suggestion => suggestion.city + \", \" + suggestion.country;\n\n\nconst renderSuggestion = suggestion => (\n  <div class=\"search-table\">\n    {suggestion.city}, {suggestion.country}\n  </div>\n);\n\nclass SearchBar3 extends React.Component {\n  constructor() {\n    super();\n\n    // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    const inputProps = {\n      placeholder: 'Search City or Zip Code',\n      value,\n      onChange: this.onChange,\n      onSubmit: this.handleSubmit\n    };\n\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        onSuggestionHighlighted={this.onSuggestionHighlighted}\n        getSuggestionValue={getSuggestionValue}\n        renderInputComponent={renderInputComponent}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n      />\n    );\n  }\n}\n\nexport default SearchBar3;\n"]},"metadata":{},"sourceType":"module"}